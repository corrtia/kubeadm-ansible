---

- name: Specify a stable IP address for the control plane
  when:
    #- groups['master'] | length > 2
    - vip is defined and vip | length > 0
  set_fact:
    control_plane_endpoint: "{{ vip }}"

- name: Init Kubernetes cluster with HA
  when: 
    - control_plane_endpoint is defined and control_plane_endpoint | length > 0
  shell: |
    kubeadm init --service-cidr {{ service_cidr }} \
                 --kubernetes-version {{ kube_version }} \
                 --pod-network-cidr {{ pod_network_cidr }} \
                 --apiserver-advertise-address {{ master_ip }} \
                 --control-plane-endpoint {{ control_plane_endpoint }} \
                 --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \
                 --upload-certs \
                 {{ kubeadm_opts }} \
                 {{ init_opts }}
  register: init_cluster
  # See: https://github.com/jetstack/cert-manager/issues/2640 with using kubeadm + calico + cert-manager
  environment:
    #no_proxy: "$no_proxy,.svc,.svc.cluster.local"
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""

- name: Init Kubernetes cluster without HA
  when: 
    - control_plane_endpoint is not defined
  shell: |
    kubeadm init --service-cidr {{ service_cidr }} \
                 --kubernetes-version {{ kube_version }} \
                 --pod-network-cidr {{ pod_network_cidr }} \
                 --apiserver-advertise-address {{ master_ip }} \
                 --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \
                 --upload-certs \
                 {{ kubeadm_opts }} \
                 {{ init_opts }}
  register: init_cluster
  # See: https://github.com/jetstack/cert-manager/issues/2640 with using kubeadm + calico + cert-manager
  environment:
    #no_proxy: "$no_proxy,.svc,.svc.cluster.local"
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""

- name: Create Kubernetes config directory
  file:
    path: ".kube/"
    state: directory

- name: Copy admin.conf to Home directory
  when: init_cluster is succeeded
  copy:
    src: "{{ kubeadmin_config }}"
    dest: ".kube/config"
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode: 0755
    remote_src: true
